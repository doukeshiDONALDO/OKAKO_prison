CCS PCM C Compiler, Version 3.127, 16805

               Filename: Y:\マイコン制御\00.LST

               ROM used: 116 (3%)
                         Largest free fragment is 2048
               RAM used: 14 (7%) at main() level
                         14 (7%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   030
0003:  NOP
....................  //	<< p873_016.c >>		2012/02 Y.Takada  
.................... //	三色LEDを転倒させる　赤→黄→緑→水色→青→紫→白　一秒おき　  
.................... //  
.................... #include <j:\ccs-c\devices\16f873a.h> 
....................  //////// Standard Header file for the PIC16F873A device ////////////////  
.................... #device PIC16F873A  
.................... #list  
....................  
.................... #Fuses HS,NOWDT,NOPROTECT,NOLVP  
.................... #use delay(clock=20000000)  
*
001C:  MOVLW  2D
001D:  MOVWF  04
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02E
0021:  MOVLW  06
0022:  MOVWF  21
0023:  CLRF   20
0024:  DECFSZ 20,F
0025:  GOTO   024
0026:  DECFSZ 21,F
0027:  GOTO   023
0028:  MOVLW  7B
0029:  MOVWF  20
002A:  DECFSZ 20,F
002B:  GOTO   02A
002C:  DECFSZ 00,F
002D:  GOTO   021
002E:  BCF    0A.3
002F:  GOTO   068 (RETURN)
.................... void led_tenmetu(void);  
.................... void main(void)  
.................... {  
.................... 	int i,i1,i2,i3,ax,bx;  
.................... 	long const clb[10] = { 0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x8c, 0x8e, 0xcc, 0x80, 0x7c };  
*
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  00
000A:  RETLW  F9
000B:  RETLW  00
000C:  RETLW  A4
000D:  RETLW  00
000E:  RETLW  B0
000F:  RETLW  00
0010:  RETLW  99
0011:  RETLW  00
0012:  RETLW  8C
0013:  RETLW  00
0014:  RETLW  8E
0015:  RETLW  00
0016:  RETLW  CC
0017:  RETLW  00
0018:  RETLW  80
0019:  RETLW  00
001A:  RETLW  7C
001B:  RETLW  00
*
0030:  CLRF   04
0031:  MOVLW  1F
0032:  ANDWF  03,F
0033:  MOVLW  07
0034:  BSF    03.5
0035:  MOVWF  1F
0036:  MOVLW  07
0037:  BCF    03.5
0038:  MOVWF  1F
.................... 	set_tris_a(0xff);  
0039:  MOVLW  FF
003A:  BSF    03.5
003B:  MOVWF  05
.................... 	set_tris_b(0x00);					  
003C:  MOVLW  00
003D:  MOVWF  06
.................... 	output_b(0xff);  
003E:  MOVLW  00
003F:  MOVWF  06
0040:  MOVLW  FF
0041:  BCF    03.5
0042:  MOVWF  06
.................... 	  
.................... 	i = 0;  
0043:  CLRF   26
.................... 	ax = 1;  
0044:  MOVLW  01
0045:  MOVWF  2A
.................... 	while (1) {  
.................... 		ax = input_a() & 0x01;  
0046:  MOVLW  FF
0047:  BSF    03.5
0048:  MOVWF  05
0049:  BCF    03.5
004A:  MOVF   05,W
004B:  ANDLW  01
004C:  MOVWF  2A
.................... 		if( ax != 1 ) {  
004D:  DECFSZ 2A,W
004E:  GOTO   050
004F:  GOTO   072
.................... 			output_b( clb[i] );  
0050:  BCF    03.0
0051:  RLF    26,W
0052:  MOVWF  20
0053:  MOVF   20,W
0054:  MOVWF  2C
0055:  INCF   2C,W
0056:  CALL   004
0057:  MOVWF  23
0058:  MOVF   2C,W
0059:  CALL   004
005A:  MOVWF  2D
005B:  MOVF   23,W
005C:  MOVWF  2E
005D:  MOVLW  00
005E:  BSF    03.5
005F:  MOVWF  06
0060:  BCF    03.5
0061:  MOVF   2D,W
0062:  MOVWF  06
.................... 			delay_ms(500);  
0063:  MOVLW  02
0064:  MOVWF  2C
0065:  MOVLW  FA
0066:  MOVWF  2D
0067:  GOTO   01C
0068:  DECFSZ 2C,F
0069:  GOTO   065
.................... 			i++;  
006A:  INCF   26,F
.................... 			ax = 1;  
006B:  MOVLW  01
006C:  MOVWF  2A
.................... 			if( i == 10 ) {  
006D:  MOVF   26,W
006E:  SUBLW  0A
006F:  BTFSS  03.2
0070:  GOTO   072
.................... 				i = 0;  
0071:  CLRF   26
.................... 			}  
.................... 		}  
.................... 	}  
0072:  GOTO   046
.................... } 
0073:  SLEEP
